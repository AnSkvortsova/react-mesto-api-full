{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Documents/dev/mesto-react/src/components/EditAvatarPopup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { PopupWithForm } from \"./PopupWithForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validators = {\n  avatar: {\n    required: value => {\n      return value === '';\n    },\n    url: value => {\n      return !/^(ftp|http|https):\\/\\/[^ \"]+$/.test(value);\n    }\n  }\n};\nexport function EditAvatarPopup(props) {\n  _s();\n\n  const avatarRef = useRef();\n  const [errors, setErrors] = useState({\n    avatar: {\n      required: true,\n      url: true\n    }\n  });\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    props.onUpdateAvatar({\n      avatar: avatarRef.current.value\n    });\n  }\n\n  useEffect(function validateInput() {\n    const avatarValidationResult = Object.keys(validators.avatar).map(errorKey => {\n      const errorResult = validators.avatar[errorKey](avatarRef);\n      return {\n        [errorKey]: errorResult\n      };\n    }).reduce((acc, el) => ({ ...acc,\n      ...el\n    }));\n    setErrors({\n      avatar: avatarValidationResult\n    });\n  }, [avatarRef, setErrors]);\n  return /*#__PURE__*/_jsxDEV(PopupWithForm, {\n    name: \"avatar\",\n    title: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C \\u0430\\u0432\\u0430\\u0442\\u0430\\u0440\",\n    button: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\",\n    isOpen: props.isOpen,\n    onClose: props.onClose,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"popup__input\",\n      id: \"input-avatar\",\n      name: \"avatar\",\n      type: \"url\",\n      placeholder: \"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0430\",\n      ref: avatarRef,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), errors.avatar.required && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup__input-error\",\n      children: \"\\u0417\\u0430\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u0435 \\u044D\\u0442\\u043E \\u043F\\u043E\\u043B\\u0435.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 35\n    }, this), errors.avatar.url && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup__input-error\",\n      children: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 URL.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditAvatarPopup, \"W7Dv3kKpig6NL9qocUkKkv5zH3w=\");\n\n_c = EditAvatarPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditAvatarPopup\");","map":{"version":3,"sources":["/Users/mac/Documents/dev/mesto-react/src/components/EditAvatarPopup.js"],"names":["React","useRef","useState","useEffect","PopupWithForm","validators","avatar","required","value","url","test","EditAvatarPopup","props","avatarRef","errors","setErrors","handleSubmit","evt","preventDefault","onUpdateAvatar","current","validateInput","avatarValidationResult","Object","keys","map","errorKey","errorResult","reduce","acc","el","isOpen","onClose"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,SAASC,aAAT,QAA8B,iBAA9B;;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAGC,KAAD,IAAW;AAAE,aAAOA,KAAK,KAAK,EAAjB;AAAsB,KADvC;AAENC,IAAAA,GAAG,EAAGD,KAAD,IAAW;AAAE,aAAO,CAAC,gCAAgCE,IAAhC,CAAqCF,KAArC,CAAR;AAAsD;AAFlE;AADS,CAAnB;AAOA,OAAO,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AACrC,QAAMC,SAAS,GAAGZ,MAAM,EAAxB;AAEA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC;AACnCI,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAE,IADJ;AAENE,MAAAA,GAAG,EAAE;AAFC;AAD2B,GAAD,CAApC;;AAOA,WAASO,YAAT,CAAsBC,GAAtB,EAA2B;AACzBA,IAAAA,GAAG,CAACC,cAAJ;AACAN,IAAAA,KAAK,CAACO,cAAN,CAAqB;AACnBb,MAAAA,MAAM,EAAEO,SAAS,CAACO,OAAV,CAAkBZ;AADP,KAArB;AAGD;;AAEDL,EAAAA,SAAS,CACP,SAASkB,aAAT,GAAyB;AACvB,UAAMC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAYnB,UAAU,CAACC,MAAvB,EAA+BmB,GAA/B,CAC7BC,QAAQ,IAAI;AACV,YAAMC,WAAW,GAAGtB,UAAU,CAACC,MAAX,CAAkBoB,QAAlB,EAA4Bb,SAA5B,CAApB;AACA,aAAO;AAAE,SAACa,QAAD,GAAYC;AAAd,OAAP;AACD,KAJ4B,EAK7BC,MAL6B,CAKtB,CAACC,GAAD,EAAMC,EAAN,MAAc,EAAC,GAAGD,GAAJ;AAAS,SAAGC;AAAZ,KAAd,CALsB,CAA/B;AAOAf,IAAAA,SAAS,CAAC;AACRT,MAAAA,MAAM,EAAEgB;AADA,KAAD,CAAT;AAGH,GAZQ,EAaT,CAACT,SAAD,EAAYE,SAAZ,CAbS,CAAT;AAeA,sBACE,QAAC,aAAD;AAAe,IAAA,IAAI,EAAC,QAApB;AAA6B,IAAA,KAAK,EAAC,uFAAnC;AAAqD,IAAA,MAAM,EAAC,wDAA5D;AACA,IAAA,MAAM,EAAEH,KAAK,CAACmB,MADd;AAEA,IAAA,OAAO,EAAEnB,KAAK,CAACoB,OAFf;AAGA,IAAA,QAAQ,EAAEhB,YAHV;AAAA,4BAIE;AAAO,MAAA,SAAS,EAAC,cAAjB;AAAgC,MAAA,EAAE,EAAC,cAAnC;AAAkD,MAAA,IAAI,EAAC,QAAvD;AAAgE,MAAA,IAAI,EAAC,KAArE;AAA2E,MAAA,WAAW,EAAC,sCAAvF;AAAgG,MAAA,GAAG,EAAEH,SAArG;AAAgH,MAAA,QAAQ;AAAxH;AAAA;AAAA;AAAA;AAAA,YAJF,EAMIC,MAAM,CAACR,MAAP,CAAcC,QAAd,iBAA0B;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAN9B,EAOIO,MAAM,CAACR,MAAP,CAAcG,GAAd,iBAAqB;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPzB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA3CeE,e;;KAAAA,e","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport { PopupWithForm } from \"./PopupWithForm\";\n\nconst validators = {\n  avatar: {\n    required: (value) => { return value === ''; },\n    url: (value) => { return !/^(ftp|http|https):\\/\\/[^ \"]+$/.test(value); },\n  },\n};\n\nexport function EditAvatarPopup(props) {\n  const avatarRef = useRef();\n\n  const [errors, setErrors] = useState({\n    avatar: {\n      required: true,\n      url: true,\n    },\n  });\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    props.onUpdateAvatar({\n      avatar: avatarRef.current.value,\n    })\n  }\n\n  useEffect(\n    function validateInput() {\n      const avatarValidationResult = Object.keys(validators.avatar).map(\n        errorKey => {\n          const errorResult = validators.avatar[errorKey](avatarRef);\n          return { [errorKey]: errorResult };\n        }\n      ).reduce((acc, el) => ({...acc, ...el}));\n\n      setErrors({\n        avatar: avatarValidationResult,\n      });\n  }, \n  [avatarRef, setErrors]);\n\n  return(\n    <PopupWithForm name=\"avatar\" title=\"Обновить аватар\" button=\"Сохранить\" \n    isOpen={props.isOpen} \n    onClose={props.onClose}\n    onSubmit={handleSubmit} >\n      <input className=\"popup__input\" id=\"input-avatar\" name=\"avatar\" type=\"url\" placeholder=\"Ссылка\" ref={avatarRef} required />\n      \n      { errors.avatar.required && <div className=\"popup__input-error\" >Заполните это поле.</div> }\n      { errors.avatar.url && <div className=\"popup__input-error\" >Введите URL.</div> }\n    </PopupWithForm>\n  );\n}"]},"metadata":{},"sourceType":"module"}