{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _checkResult(response) {\n    if (response.ok) {\n      return response.json();\n    }\n\n    ;\n    return Promise.reject(`Ошибка: ${response.status}`);\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(response => this._checkResult(response));\n  }\n\n  pushUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(response => this._checkResult(response));\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(response => this._checkResult(response));\n  }\n\n  pushNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(response => this._checkResult(response));\n  }\n\n  setLikeCard(id, isLike) {\n    const status = isLike ? 'DELETE' : 'PUT';\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: status,\n      headers: this._headers\n    }).then(response => this._checkResult(response));\n  }\n\n  removeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(response => this._checkResult(response));\n  }\n\n  updateAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(response => this._checkResult(response));\n  }\n\n}\n\nconst options = {\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-25',\n  headers: {\n    authorization: '55170ba5-0ba4-4f9f-8430-310e36be1994',\n    'Content-Type': 'application/json'\n  }\n};\nconst api = new Api(options);\nexport default api;","map":{"version":3,"sources":["/Users/mac/Documents/dev/mesto-react/src/utils/api.js"],"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","_checkResult","response","ok","json","Promise","reject","status","getUserInfo","fetch","then","pushUserInfo","data","method","body","JSON","stringify","name","about","getInitialCards","pushNewCard","link","setLikeCard","id","isLike","removeCard","updateAvatar","avatar","authorization","api"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACRC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKC,QAAL,GAAgBD,OAAO,CAACE,OAAxB;AACA,SAAKC,QAAL,GAAgBH,OAAO,CAACI,OAAxB;AACD;;AAEDC,EAAAA,YAAY,CAACC,QAAD,EAAW;AACrB,QAAGA,QAAQ,CAACC,EAAZ,EAAgB;AACd,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AAAA;AACD,WAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUJ,QAAQ,CAACK,MAAO,EAA1C,CAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAOC,KAAK,CAAE,GAAE,KAAKZ,QAAS,WAAlB,EAA8B;AACxCG,MAAAA,OAAO,EAAE,KAAKD;AAD0B,KAA9B,CAAL,CAGNW,IAHM,CAGDR,QAAQ,IAAI,KAAKD,YAAL,CAAkBC,QAAlB,CAHX,CAAP;AAID;;AAEDS,EAAAA,YAAY,CAACC,IAAD,EAAO;AACjB,WAAOH,KAAK,CAAE,GAAE,KAAKZ,QAAS,WAAlB,EAA8B;AACxCgB,MAAAA,MAAM,EAAE,OADgC;AAExCb,MAAAA,OAAO,EAAE,KAAKD,QAF0B;AAGxCe,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,IAAI,EAAEL,IAAI,CAACK,IADQ;AAEnBC,QAAAA,KAAK,EAAEN,IAAI,CAACM;AAFO,OAAf;AAHkC,KAA9B,CAAL,CAQNR,IARM,CAQDR,QAAQ,IAAI,KAAKD,YAAL,CAAkBC,QAAlB,CARX,CAAP;AASD;;AAEDiB,EAAAA,eAAe,GAAG;AAChB,WAAOV,KAAK,CAAE,GAAE,KAAKZ,QAAS,QAAlB,EAA2B;AACrCG,MAAAA,OAAO,EAAE,KAAKD;AADuB,KAA3B,CAAL,CAGNW,IAHM,CAGDR,QAAQ,IAAI,KAAKD,YAAL,CAAkBC,QAAlB,CAHX,CAAP;AAID;;AAEDkB,EAAAA,WAAW,CAACR,IAAD,EAAO;AAChB,WAAOH,KAAK,CAAE,GAAE,KAAKZ,QAAS,QAAlB,EAA2B;AACrCgB,MAAAA,MAAM,EAAE,MAD6B;AAErCb,MAAAA,OAAO,EAAE,KAAKD,QAFuB;AAGrCe,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,IAAI,EAAEL,IAAI,CAACK,IADQ;AAEnBI,QAAAA,IAAI,EAAET,IAAI,CAACS;AAFQ,OAAf;AAH+B,KAA3B,CAAL,CAQNX,IARM,CAQDR,QAAQ,IAAI,KAAKD,YAAL,CAAkBC,QAAlB,CARX,CAAP;AASD;;AAEDoB,EAAAA,WAAW,CAACC,EAAD,EAAKC,MAAL,EAAa;AACtB,UAAMjB,MAAM,GAAGiB,MAAM,GAAG,QAAH,GAAc,KAAnC;AACA,WAAOf,KAAK,CAAE,GAAE,KAAKZ,QAAS,gBAAe0B,EAAG,EAApC,EAAuC;AACjDV,MAAAA,MAAM,EAAEN,MADyC;AAEjDP,MAAAA,OAAO,EAAE,KAAKD;AAFmC,KAAvC,CAAL,CAINW,IAJM,CAIDR,QAAQ,IAAI,KAAKD,YAAL,CAAkBC,QAAlB,CAJX,CAAP;AAKD;;AAEDuB,EAAAA,UAAU,CAACF,EAAD,EAAK;AACb,WAAOd,KAAK,CAAE,GAAE,KAAKZ,QAAS,UAAS0B,EAAG,EAA9B,EAAiC;AAC3CV,MAAAA,MAAM,EAAE,QADmC;AAE3Cb,MAAAA,OAAO,EAAE,KAAKD;AAF6B,KAAjC,CAAL,CAINW,IAJM,CAIDR,QAAQ,IAAI,KAAKD,YAAL,CAAkBC,QAAlB,CAJX,CAAP;AAKD;;AAEDwB,EAAAA,YAAY,CAACd,IAAD,EAAO;AACjB,WAAOH,KAAK,CAAE,GAAE,KAAKZ,QAAS,kBAAlB,EAAqC;AAC/CgB,MAAAA,MAAM,EAAE,OADuC;AAE/Cb,MAAAA,OAAO,EAAE,KAAKD,QAFiC;AAG/Ce,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBW,QAAAA,MAAM,EAAEf,IAAI,CAACe;AADM,OAAf;AAHyC,KAArC,CAAL,CAONjB,IAPM,CAODR,QAAQ,IAAI,KAAKD,YAAL,CAAkBC,QAAlB,CAPX,CAAP;AAQD;;AA7EO;;AAgFV,MAAMN,OAAO,GAAG;AACdE,EAAAA,OAAO,EAAE,6CADK;AAEdE,EAAAA,OAAO,EAAE;AACP4B,IAAAA,aAAa,EAAE,sCADR;AAEP,oBAAgB;AAFT;AAFK,CAAhB;AAOA,MAAMC,GAAG,GAAG,IAAInC,GAAJ,CAAQE,OAAR,CAAZ;AACA,eAAeiC,GAAf","sourcesContent":["class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n\n  _checkResult(response) {\n    if(response.ok) {\n      return response.json();\n    };\n    return Promise.reject(`Ошибка: ${response.status}`);\n  };\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers,\n    })\n    .then(response => this._checkResult(response));\n  };\n\n  pushUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      })\n    })\n    .then(response => this._checkResult(response));\n  };\n  \n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers,\n    })\n    .then(response => this._checkResult(response));\n  };\n\n  pushNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      })\n    })\n    .then(response => this._checkResult(response));\n  };\n\n  setLikeCard(id, isLike) {\n    const status = isLike ? 'DELETE' : 'PUT'\n    return fetch(`${this._baseUrl}/cards/likes/${id}`, {\n      method: status,\n      headers: this._headers,\n    })\n    .then(response => this._checkResult(response));\n  };\n\n  removeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers,\n    })\n    .then(response => this._checkResult(response));\n  };\n\n  updateAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data.avatar,\n      })\n    })\n    .then(response => this._checkResult(response));\n  }\n}\n\nconst options = {\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-25',\n  headers: {\n    authorization: '55170ba5-0ba4-4f9f-8430-310e36be1994',\n    'Content-Type': 'application/json',\n  }\n}\nconst api = new Api(options);\nexport default api;"]},"metadata":{},"sourceType":"module"}